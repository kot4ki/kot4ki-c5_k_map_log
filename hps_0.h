#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'seed', class 'altera_avalon_pio'
 * The macros are prefixed with 'SEED_'.
 * The prefix is the slave descriptor.
 */
#define SEED_COMPONENT_TYPE altera_avalon_pio
#define SEED_COMPONENT_NAME seed
#define SEED_BASE 0x0
#define SEED_SPAN 16
#define SEED_END 0xf
#define SEED_BIT_CLEARING_EDGE_REGISTER 0
#define SEED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SEED_CAPTURE 0
#define SEED_DATA_WIDTH 32
#define SEED_DO_TEST_BENCH_WIRING 0
#define SEED_DRIVEN_SIM_VALUE 0
#define SEED_EDGE_TYPE NONE
#define SEED_FREQ 50000000
#define SEED_HAS_IN 0
#define SEED_HAS_OUT 1
#define SEED_HAS_TRI 0
#define SEED_IRQ_TYPE NONE
#define SEED_RESET_VALUE 0

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x1000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x1007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1613104362

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x2000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x2007
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x3000
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x300f
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 7
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 127

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x4000
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x400f
#define DIPSW_PIO_IRQ 0
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_DATA_WIDTH 4
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE ANY
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE EDGE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x5000
#define BUTTON_PIO_SPAN 16
#define BUTTON_PIO_END 0x500f
#define BUTTON_PIO_IRQ 1
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_DATA_WIDTH 2
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE FALLING
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE EDGE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'read_clk', class 'altera_avalon_pio'
 * The macros are prefixed with 'READ_CLK_'.
 * The prefix is the slave descriptor.
 */
#define READ_CLK_COMPONENT_TYPE altera_avalon_pio
#define READ_CLK_COMPONENT_NAME read_clk
#define READ_CLK_BASE 0x6000
#define READ_CLK_SPAN 16
#define READ_CLK_END 0x600f
#define READ_CLK_BIT_CLEARING_EDGE_REGISTER 1
#define READ_CLK_BIT_MODIFYING_OUTPUT_REGISTER 0
#define READ_CLK_CAPTURE 0
#define READ_CLK_DATA_WIDTH 1
#define READ_CLK_DO_TEST_BENCH_WIRING 0
#define READ_CLK_DRIVEN_SIM_VALUE 0
#define READ_CLK_EDGE_TYPE NONE
#define READ_CLK_FREQ 50000000
#define READ_CLK_HAS_IN 0
#define READ_CLK_HAS_OUT 1
#define READ_CLK_HAS_TRI 0
#define READ_CLK_IRQ_TYPE NONE
#define READ_CLK_RESET_VALUE 0

/*
 * Macros for device 'prng_out', class 'altera_avalon_pio'
 * The macros are prefixed with 'PRNG_OUT_'.
 * The prefix is the slave descriptor.
 */
#define PRNG_OUT_COMPONENT_TYPE altera_avalon_pio
#define PRNG_OUT_COMPONENT_NAME prng_out
#define PRNG_OUT_BASE 0x7000
#define PRNG_OUT_SPAN 16
#define PRNG_OUT_END 0x700f
#define PRNG_OUT_BIT_CLEARING_EDGE_REGISTER 0
#define PRNG_OUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PRNG_OUT_CAPTURE 0
#define PRNG_OUT_DATA_WIDTH 32
#define PRNG_OUT_DO_TEST_BENCH_WIRING 0
#define PRNG_OUT_DRIVEN_SIM_VALUE 0
#define PRNG_OUT_EDGE_TYPE NONE
#define PRNG_OUT_FREQ 50000000
#define PRNG_OUT_HAS_IN 1
#define PRNG_OUT_HAS_OUT 0
#define PRNG_OUT_HAS_TRI 0
#define PRNG_OUT_IRQ_TYPE NONE
#define PRNG_OUT_RESET_VALUE 0

/*
 * Macros for device 'fsm_reset', class 'altera_avalon_pio'
 * The macros are prefixed with 'FSM_RESET_'.
 * The prefix is the slave descriptor.
 */
#define FSM_RESET_COMPONENT_TYPE altera_avalon_pio
#define FSM_RESET_COMPONENT_NAME fsm_reset
#define FSM_RESET_BASE 0x8000
#define FSM_RESET_SPAN 16
#define FSM_RESET_END 0x800f
#define FSM_RESET_BIT_CLEARING_EDGE_REGISTER 0
#define FSM_RESET_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FSM_RESET_CAPTURE 0
#define FSM_RESET_DATA_WIDTH 1
#define FSM_RESET_DO_TEST_BENCH_WIRING 0
#define FSM_RESET_DRIVEN_SIM_VALUE 0
#define FSM_RESET_EDGE_TYPE NONE
#define FSM_RESET_FREQ 50000000
#define FSM_RESET_HAS_IN 0
#define FSM_RESET_HAS_OUT 1
#define FSM_RESET_HAS_TRI 0
#define FSM_RESET_IRQ_TYPE NONE
#define FSM_RESET_RESET_VALUE 0

/*
 * Macros for device 'prng_start', class 'altera_avalon_pio'
 * The macros are prefixed with 'PRNG_START_'.
 * The prefix is the slave descriptor.
 */
#define PRNG_START_COMPONENT_TYPE altera_avalon_pio
#define PRNG_START_COMPONENT_NAME prng_start
#define PRNG_START_BASE 0x9000
#define PRNG_START_SPAN 16
#define PRNG_START_END 0x900f
#define PRNG_START_BIT_CLEARING_EDGE_REGISTER 0
#define PRNG_START_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PRNG_START_CAPTURE 0
#define PRNG_START_DATA_WIDTH 1
#define PRNG_START_DO_TEST_BENCH_WIRING 0
#define PRNG_START_DRIVEN_SIM_VALUE 0
#define PRNG_START_EDGE_TYPE NONE
#define PRNG_START_FREQ 50000000
#define PRNG_START_HAS_IN 0
#define PRNG_START_HAS_OUT 1
#define PRNG_START_HAS_TRI 0
#define PRNG_START_IRQ_TYPE NONE
#define PRNG_START_RESET_VALUE 0

/*
 * Macros for device 'rec_done', class 'altera_avalon_pio'
 * The macros are prefixed with 'REC_DONE_'.
 * The prefix is the slave descriptor.
 */
#define REC_DONE_COMPONENT_TYPE altera_avalon_pio
#define REC_DONE_COMPONENT_NAME rec_done
#define REC_DONE_BASE 0xa000
#define REC_DONE_SPAN 16
#define REC_DONE_END 0xa00f
#define REC_DONE_BIT_CLEARING_EDGE_REGISTER 0
#define REC_DONE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define REC_DONE_CAPTURE 0
#define REC_DONE_DATA_WIDTH 1
#define REC_DONE_DO_TEST_BENCH_WIRING 0
#define REC_DONE_DRIVEN_SIM_VALUE 0
#define REC_DONE_EDGE_TYPE NONE
#define REC_DONE_FREQ 50000000
#define REC_DONE_HAS_IN 0
#define REC_DONE_HAS_OUT 1
#define REC_DONE_HAS_TRI 0
#define REC_DONE_IRQ_TYPE NONE
#define REC_DONE_RESET_VALUE 0

/*
 * Macros for device 'r_addr', class 'altera_avalon_pio'
 * The macros are prefixed with 'R_ADDR_'.
 * The prefix is the slave descriptor.
 */
#define R_ADDR_COMPONENT_TYPE altera_avalon_pio
#define R_ADDR_COMPONENT_NAME r_addr
#define R_ADDR_BASE 0xb000
#define R_ADDR_SPAN 16
#define R_ADDR_END 0xb00f
#define R_ADDR_BIT_CLEARING_EDGE_REGISTER 0
#define R_ADDR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define R_ADDR_CAPTURE 0
#define R_ADDR_DATA_WIDTH 15
#define R_ADDR_DO_TEST_BENCH_WIRING 0
#define R_ADDR_DRIVEN_SIM_VALUE 0
#define R_ADDR_EDGE_TYPE NONE
#define R_ADDR_FREQ 50000000
#define R_ADDR_HAS_IN 0
#define R_ADDR_HAS_OUT 1
#define R_ADDR_HAS_TRI 0
#define R_ADDR_IRQ_TYPE NONE
#define R_ADDR_RESET_VALUE 0

/*
 * Macros for device 'gen_done', class 'altera_avalon_pio'
 * The macros are prefixed with 'GEN_DONE_'.
 * The prefix is the slave descriptor.
 */
#define GEN_DONE_COMPONENT_TYPE altera_avalon_pio
#define GEN_DONE_COMPONENT_NAME gen_done
#define GEN_DONE_BASE 0xc000
#define GEN_DONE_SPAN 16
#define GEN_DONE_END 0xc00f
#define GEN_DONE_BIT_CLEARING_EDGE_REGISTER 1
#define GEN_DONE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define GEN_DONE_CAPTURE 1
#define GEN_DONE_DATA_WIDTH 1
#define GEN_DONE_DO_TEST_BENCH_WIRING 0
#define GEN_DONE_DRIVEN_SIM_VALUE 0
#define GEN_DONE_EDGE_TYPE RISING
#define GEN_DONE_FREQ 50000000
#define GEN_DONE_HAS_IN 1
#define GEN_DONE_HAS_OUT 0
#define GEN_DONE_HAS_TRI 0
#define GEN_DONE_IRQ_TYPE NONE
#define GEN_DONE_RESET_VALUE 0

/*
 * Macros for device 'ILC', class 'interrupt_latency_counter'
 * The macros are prefixed with 'ILC_'.
 * The prefix is the slave descriptor.
 */
#define ILC_COMPONENT_TYPE interrupt_latency_counter
#define ILC_COMPONENT_NAME ILC
#define ILC_BASE 0x30000
#define ILC_SPAN 256
#define ILC_END 0x300ff


#endif /* _ALTERA_HPS_0_H_ */
